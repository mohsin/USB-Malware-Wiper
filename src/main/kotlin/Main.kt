// Copyright 2000-2021 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

import androidx.compose.desktop.ui.tooling.preview.Preview
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.awt.ComposeWindow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Window
import androidx.compose.ui.window.WindowPosition
import androidx.compose.ui.window.application
import androidx.compose.ui.window.rememberWindowState
import java.awt.FileDialog
import java.nio.file.Files
import java.nio.file.Path
import java.security.MessageDigest
import kotlin.concurrent.thread
import kotlin.io.path.deleteIfExists
import kotlin.io.path.isRegularFile

@Composable
@Preview
fun App() {
    var inputHash by remember { mutableStateOf("") }
	var chosenFolder by remember { mutableStateOf("No folder selected") }
	var isRunning by remember {  mutableStateOf(false) }
	var progress by remember {  mutableStateOf(0f) }
	var currentStatus by remember {  mutableStateOf("Waiting for Selection") }

    MaterialTheme {
		Column(Modifier.fillMaxSize().padding(0.dp, 30.dp, 0.dp, 20.dp), Arrangement.spacedBy(5.dp)) {
			TextField(
				value = inputHash,
				onValueChange = { inputHash = it },
				singleLine = true,
				modifier = Modifier.fillMaxWidth().padding(30.dp, 0.dp),
				label = { Text("SHA256 hash") }
			)
			Text(text = chosenFolder, modifier = Modifier.padding(30.dp, 0.dp).align(Alignment.CenterHorizontally))
			Row(Modifier.fillMaxWidth().padding(0.dp, 15.dp), Arrangement.SpaceEvenly) {
				Button(modifier = Modifier.padding(0.dp, 10.dp),
					onClick = {
						System.setProperty("apple.awt.fileDialogForDirectories", "true")
						val fd = FileDialog(ComposeWindow())
						fd.setLocation(50, 50)
						fd.isVisible = true
						chosenFolder = fd.directory + fd.file
						System.setProperty("apple.awt.fileDialogForDirectories", "false")
						currentStatus = "Ready"
					}) {
					Text("Select Folder")
				}
				Button(modifier = Modifier.padding(0.dp, 10.dp),
					enabled = chosenFolder !== "No folder selected",
					onClick = {
						isRunning = true
						currentStatus = "Running..."
						thread {
							val totalCount = Files.walk(Path.of(chosenFolder))
								.parallel()
								.count()
							var currentCount = 0
							Files.walk(Path.of(chosenFolder))
								.parallel()
								.forEach { path: Path? ->
									currentCount++
									if (path!!.isRegularFile()) {
										val fileHash = MessageDigest
											.getInstance("SHA-256")
											.digest(path.toFile().readBytes())
											.fold("") { str, it -> str + "%02x".format(it) }
										if (fileHash == inputHash) {
											path.deleteIfExists()
											println("Deleted: ${path.fileName}")
										}
									}
									progress = currentCount.toFloat() / totalCount.toFloat()
								}
							currentStatus = "Complete"
						}
					}) {
					Text("Scan and Remove")
				}
			}
			if (isRunning) {
				LinearProgressIndicator(
					progress = progress,
					modifier = Modifier.fillMaxWidth().padding(30.dp, 0.dp)
				)
			}
			Text(
				text = currentStatus,
				modifier = Modifier.align(Alignment.CenterHorizontally)
			)
		}
    }
}

fun main() = application {
    Window(
		onCloseRequest = ::exitApplication,
		title = "USB Malware Wiper",
		state = rememberWindowState(width = 500.dp, height = 300.dp, position = WindowPosition.Aligned(Alignment.Center))
	) {
        App()
    }
}
